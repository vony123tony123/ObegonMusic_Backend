{
    "info": {
        "name": "MyExpressApp - Articles (GraphQL)",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "1. Get All Articles",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "graphql",
                    "graphql": {
                        "query": "query GetArticles {\n  getArticles {\n    article_id\n    title\n    views\n    user {\n      user_id\n      name\n    }\n    category {\n      category_id\n      name\n    }\n    tags {\n      tag_id\n      tag_name\n    }\n  }\n}",
                        "variables": ""
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/graphql",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "graphql"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "2. Create Article",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                            "const response = pm.response.json();",
                            "pm.test(\"Article was created\", () => {",
                            "    pm.expect(response.data.createArticle).to.be.an('object');",
                            "    const newId = response.data.createArticle.article_id;",
                            "    pm.collectionVariables.set(\"article_id\", newId);",
                            "    console.log('Set article_id to: ' + newId);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "graphql",
                    "graphql": {
                        "query": "mutation CreateArticle($input: ArticleInput!) {\n  createArticle(input: $input) {\n    article_id\n    title\n    user { name }\n    category { name }\n    tags { tag_name }\n  }\n}",
                        "variables": "{\n    \"input\": {\n        \"title\": \"New Article from Postman\",\n        \"content_url\": \"/storage/article/postman-test.mdx\",\n        \"user_id\": \"1\",\n        \"category_id\": \"1\",\n        \"tags\": [\"1\", \"2\"]\n    }\n}"
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/graphql",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "graphql"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "3. Get Article By ID (Verify Create)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                            "const response = pm.response.json();",
                            "const expectedId = pm.collectionVariables.get(\"article_id\");",
                            "pm.test(\"Correct article was retrieved\", () => {",
                            "    pm.expect(response.data.getArticleById.article_id).to.eql(expectedId);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "graphql",
                    "graphql": {
                        "query": "query GetArticleById($articleId: ID!) {\n  getArticleById(article_id: $articleId) {\n    article_id\n    title\n    views\n  }\n}",
                        "variables": "{\n    \"articleId\": \"{{article_id}}\"\n}"
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/graphql",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "graphql"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "4. Search Articles",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                            "const response = pm.response.json();",
                            "pm.test(\"Search returned results\", () => {",
                            "    pm.expect(response.data.searchArticles).to.be.an('array').and.not.be.empty;",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "graphql",
                    "graphql": {
                        "query": "query SearchArticles($params: ArticleSearchInput!) {\n  searchArticles(params: $params) {\n    article_id\n    title\n    views\n  }\n}",
                        "variables": "{\n    \"params\": {\n        \"title\": \"Postman\"\n    }\n}"
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/graphql",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "graphql"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "5. Delete Article",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                            "const response = pm.response.json();",
                            "pm.test(\"Delete mutation returned the deleted article\", () => {",
                            "    pm.expect(response.data.deleteArticle).to.be.an('object');",
                            "    pm.expect(response.data.deleteArticle.article_id).to.eql(pm.collectionVariables.get(\"article_id\"));",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "graphql",
                    "graphql": {
                        "query": "mutation DeleteArticle($articleId: ID!) {\n  deleteArticle(article_id: $articleId) {\n    article_id\n    title\n  }\n}",
                        "variables": "{\n    \"articleId\": \"{{article_id}}\"\n}"
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/graphql",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "graphql"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "6. Get By ID (Verify Delete)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                            "const response = pm.response.json();",
                            "pm.test(\"Article is null, confirming deletion\", () => {",
                            "    pm.expect(response.data.getArticleById).to.be.null;",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "graphql",
                    "graphql": {
                        "query": "query GetArticleById($articleId: ID!) {\n  getArticleById(article_id: $articleId) {\n    article_id\n    title\n  }\n}",
                        "variables": "{\n    \"articleId\": \"{{article_id}}\"\n}"
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/graphql",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "graphql"
                    ]
                }
            },
            "response": []
        }
    ],
    "variable": [
        {
            "key": "baseUrl"
        },
        {
            "key": "article_id",
            "value": ""
        }
    ]
}